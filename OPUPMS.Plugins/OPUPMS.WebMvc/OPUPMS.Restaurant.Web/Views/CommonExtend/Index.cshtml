
@{
    Layout = Url.Content(Plugin.Instance.GetLayoutPath("Shared/_Layout.cshtml"));
    var name = ViewBag.TypeName;
    var TypeId = @ViewBag.TypeId;
    ViewBag.Title = name + "管理";
}

<div class="container-fluid">
    <ol class="breadcrumb" style="margin-bottom:0px; padding:6px 15px; line-height:25px;">
        <li>首页</li>
        <li>餐饮管理</li>
        <li>@ViewBag.Title</li>
        <a class="btn btn-primary pull-right radius" style="line-height:1.6em;" href="javascript:location.replace(location.href);" title="刷新"><span class="glyphicon glyphicon-refresh"></span></a>
    </ol>
    <div id="toolbar" class="btn-group">
        <button type="button" data-id="0" class="btn btn-default add"><span class="glyphicon glyphicon-plus" aria-hidden="true"></span>添加</button>
    </div>
    <div class="page-container">
        <table id="tablist" class="table table-condensed table-hovered sortableTable"></table>
    </div>
</div>
@section FooterScripts{
@ScriptsEx.Render(FrameworkInfo.Name, "JqSignalR");
<script src="~/signalr/hubs"></script>

    <script type="text/javascript">
        $(function () {
            var pageJs = stalls.Create();
            pageJs.init();
        })

        function refreshView() {
            location.reload();
        }

        var stalls = {
            Create: function () {
                var bindModel = {};
                var layindex;

                var chat = $.connection.systemHub;
                chat.hubName = 'systemHub';
                chat.connection.start();


                var bindAction = function () {
                    $("#tablist").bootstrapTable({
                        url: '/Res/CommonExtend/GetExtendItemList',     //请求后台的URL（*）
                        method: 'get',           //请求方式（*）
                        toolbar: '#toolbar',        //工具按钮用哪个容器
                        striped: true,           //是否显示行间隔色
                        cache: false,            //是否使用缓存，默认为true，所以一般情况下需要设置一下这个属性（*）
                        pagination: true,          //是否显示分页（*）
                        sortName: "Id",
                        sortable: true,           //是否启用排序
                        sortOrder: "desc",     //排序方式
                        showRefresh: false, // 开启刷新功能
                        clickToSelect: true,
                        showFooter: false,  //footer 用作统计
                        queryParamsType: "limit",//查询参数组织方式
                        queryParams: function getParams(params) {
                            params.TypeId = @TypeId;
                            return params;
                        },//传递参数（*）
                        sidePagination: "server",      //分页方式：client客户端分页，server服务端分页（*）
                        pageNumber: 1,            //初始化加载第一页，默认第一页
                        pageSize: 10,            //每页的记录行数（*）
                        pageList: [10, 20, 50, 100],    //可供选择的每页的行数（*）
                        strictSearch: true,
                        //height: 460,            //行高，如果没有设置height属性，表格自动根据记录条数觉得表格高度
                        uniqueId: "ID",           //每一行的唯一标识，一般为主键列
                        cardView: false,          //是否显示详细视图
                        buttonsAlign: "left",
                        exportDataType: "basic",
                        columns: [{
                            field: 'TypeName',
                            title: '类型'
                        }, {
                            field: 'Code',
                            title: '代码'
                        }, {
                            field: 'Name',
                            title: '名称'
                        },  {
                            field: 'ItemValue',
                            title: '项值'
                        }, {
                                field: 'Sort',
                            title: '排序'
                        }, {
                                field: 'action',
                            title: '操作',
                            formatter: controlEdit
                        }]
                    })

                    function controlEdit(value, row, index) {
                        var id = row["Id"];
                        var Code = row["Code"];
                         return new Array(
                             "<a class='btn btn-default add' href='javascript://' data-id='" + id + "'><span class='glyphicon glyphicon-edit'></span>编辑</a>",
                             "<a class='btn btn-default cancel' href='javascript://' data-id='" + id + "' data-Code='" + Code + "'><span class='glyphicon glyphicon-remove'></span>删除</a>"
                        ).join(" ");

                    }

             

                           //删除
                    $(document).on("click", ".cancel", function () {
                        var id = $(this).attr("data-id");
                        var Code = $(this).attr("data-Code");
                        layer.confirm("确定要删除【" + Code + "】数据？", { title: '删除提示', btn: ['确认删除', '取消'] }, function () {
                            var para = { id: id, typeId:@TypeId  };
                            $.ajax({
                                type: "post",
                                url: "/Res/CommonExtend/DeleteExtendItem",
                                dataType: "json",
                                data: JSON.stringify(para),
                                contentType: "application/json; charset=utf-8",
                                async: false,
                                beforeSend: function (xhr) {
                                    layindex = layer.open({
                                        type: 3,
                                        shadeClose: false, //点击遮罩关闭层
                                    });
                                },
                                success: function (data, textStatus) {                                
                                    var res = data.Data;
                                    var mes = data.Message;                                   
                                    if (res == true) {
                                        $.connection.hub.start().done(function () {
                                            chat.server.notifyResServiceRefersh(true);
                                        });
                                        layer.alert("删除成功");
                                        refreshView();
                                    } else {
                                        layer.alert(mes);
                                    }
                                }
                                ,
                                complete: function (XMLHttpRequest, textStatus) {
                                    layer.close(layindex);
                                }
                            });
                        });
                    })


                          $(document).on("click", ".add", function () {
                        var id = $(this).attr("data-id");
                        var height = $(document).height() - 100;
                        layer.open({
                            type: 2,
                            title: '@name' + "管理编辑",
                            area: ["500px","400px"],
                            content: "/Res/CommonExtend/EditExtendItem?id=" + id + "&typeId=" + @TypeId,
                            maxmin: false
                        });
                    })

                }

                bindModel.init = function () {
                    bindAction();
                }

                return bindModel;
            }
        }

        function Refresh() {
            $("#tablist").bootstrapTable('refresh');
        }
    </script>
}


